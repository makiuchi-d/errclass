// errclass is an error classification utility
package errclass

import "fmt"

// ErrClass is a function that adds an error specification information
// An ErrClass can be the target of errors.Is()
type ErrClass func(error) error

type classedErr struct {
	error
	np *string
}

type dummy struct{}

var (
	_ error = ErrClass(nil)
	_ error = classedErr{}
	_ error = dummy{}

	_ fmt.Formatter = classedErr{}
)

// New creates an ErrClass with name
func New(name string) ErrClass {
	np := &name
	return func(err error) error {
		if err == nil {
			return nil
		}
		return classedErr{err, np}
	}
}

// Error implements error interface
func (cls ErrClass) Error() string {
	if cls == nil {
		return ""
	}
	err := cls(dummy{})
	if err == nil {
		return ""
	}
	if te, ok := err.(classedErr); ok {
		return *te.np
	}
	return err.Error()
}

func (te classedErr) Unwrap() error {
	return te.error
}

// Is returns true when the classedErr is generated by the target ErrClass.
func (te classedErr) Is(target error) bool {
	cls, ok := target.(ErrClass)
	if !ok || cls == nil {
		return false
	}
	tt, ok := cls(dummy{}).(classedErr)
	if !ok {
		return false
	}
	return tt.np == te.np
}

func (te classedErr) Format(f fmt.State, verb rune) {
	if fmter, ok := te.error.(fmt.Formatter); ok {
		fmter.Format(f, verb)
		return
	}
	f.Write([]byte(te.error.Error()))
}

func (dummy) Error() string { return "" }
